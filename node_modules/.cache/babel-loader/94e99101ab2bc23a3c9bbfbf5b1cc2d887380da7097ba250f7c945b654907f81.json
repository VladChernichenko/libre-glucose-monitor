{"ast":null,"code":"import axios from 'axios';\nclass LibreApiService {\n  constructor() {\n    this.api = void 0;\n    this.baseUrl = void 0;\n    this.token = null;\n    this.baseUrl = process.env.REACT_APP_LIBRE_API_URL || 'https://api.libreview.com';\n    this.api = axios.create({\n      baseURL: this.baseUrl,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n\n    // Load token from localStorage\n    this.token = localStorage.getItem('libre_token');\n    if (this.token) {\n      this.setAuthToken(this.token);\n    }\n  }\n  setAuthToken(token) {\n    this.token = token;\n    this.api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    localStorage.setItem('libre_token', token);\n  }\n  async authenticate(email, password) {\n    try {\n      const response = await this.api.post('/auth/login', {\n        email,\n        password\n      });\n      const authData = response.data;\n      this.setAuthToken(authData.token);\n      return authData;\n    } catch (error) {\n      console.error('Authentication failed:', error);\n      throw new Error('Authentication failed. Please check your credentials.');\n    }\n  }\n  async getPatientInfo() {\n    try {\n      const response = await this.api.get('/user/profile');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch patient info:', error);\n      throw new Error('Failed to fetch patient information.');\n    }\n  }\n  async getConnections() {\n    try {\n      const response = await this.api.get('/connections');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch connections:', error);\n      throw new Error('Failed to fetch connections.');\n    }\n  }\n  async getGlucoseData(patientId, days = 1) {\n    try {\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n      const response = await this.api.get(`/patients/${patientId}/glucose`, {\n        params: {\n          startDate: startDate.toISOString(),\n          endDate: endDate.toISOString()\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch glucose data:', error);\n      throw new Error('Failed to fetch glucose data.');\n    }\n  }\n  async getRealTimeData(patientId) {\n    try {\n      const response = await this.api.get(`/patients/${patientId}/glucose/current`);\n      const data = response.data;\n      return {\n        timestamp: new Date(data.timestamp),\n        value: data.value,\n        trend: data.trend,\n        trendArrow: data.trendArrow,\n        status: this.getGlucoseStatus(data.value),\n        unit: data.unit || 'mg/dL'\n      };\n    } catch (error) {\n      console.error('Failed to fetch real-time data:', error);\n      throw new Error('Failed to fetch real-time glucose data.');\n    }\n  }\n  getGlucoseStatus(value) {\n    if (value < 70) return 'low';\n    if (value < 180) return 'normal';\n    if (value < 250) return 'high';\n    return 'critical';\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n  logout() {\n    this.token = null;\n    delete this.api.defaults.headers.common['Authorization'];\n    localStorage.removeItem('libre_token');\n  }\n}\nexport const libreApiService = new LibreApiService();\nexport default libreApiService;","map":{"version":3,"names":["axios","LibreApiService","constructor","api","baseUrl","token","process","env","REACT_APP_LIBRE_API_URL","create","baseURL","headers","localStorage","getItem","setAuthToken","defaults","common","setItem","authenticate","email","password","response","post","authData","data","error","console","Error","getPatientInfo","get","getConnections","getGlucoseData","patientId","days","endDate","Date","startDate","setDate","getDate","params","toISOString","getRealTimeData","timestamp","value","trend","trendArrow","status","getGlucoseStatus","unit","isAuthenticated","logout","removeItem","libreApiService"],"sources":["/Users/vlad/cursorai/src/services/libreApi.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { \n  LibreAuthResponse, \n  LibrePatient, \n  LibreGraphData, \n  LibreConnection,\n  GlucoseReading \n} from '../types/libre';\n\nclass LibreApiService {\n  private api: AxiosInstance;\n  private baseUrl: string;\n  private token: string | null = null;\n\n  constructor() {\n    this.baseUrl = process.env.REACT_APP_LIBRE_API_URL || 'https://api.libreview.com';\n    this.api = axios.create({\n      baseURL: this.baseUrl,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n    });\n\n    // Load token from localStorage\n    this.token = localStorage.getItem('libre_token');\n    if (this.token) {\n      this.setAuthToken(this.token);\n    }\n  }\n\n  private setAuthToken(token: string) {\n    this.token = token;\n    this.api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    localStorage.setItem('libre_token', token);\n  }\n\n  async authenticate(email: string, password: string): Promise<LibreAuthResponse> {\n    try {\n      const response = await this.api.post('/auth/login', {\n        email,\n        password,\n      });\n      \n      const authData = response.data;\n      this.setAuthToken(authData.token);\n      return authData;\n    } catch (error) {\n      console.error('Authentication failed:', error);\n      throw new Error('Authentication failed. Please check your credentials.');\n    }\n  }\n\n  async getPatientInfo(): Promise<LibrePatient> {\n    try {\n      const response = await this.api.get('/user/profile');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch patient info:', error);\n      throw new Error('Failed to fetch patient information.');\n    }\n  }\n\n  async getConnections(): Promise<LibreConnection[]> {\n    try {\n      const response = await this.api.get('/connections');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch connections:', error);\n      throw new Error('Failed to fetch connections.');\n    }\n  }\n\n  async getGlucoseData(patientId: string, days: number = 1): Promise<LibreGraphData> {\n    try {\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n\n      const response = await this.api.get(`/patients/${patientId}/glucose`, {\n        params: {\n          startDate: startDate.toISOString(),\n          endDate: endDate.toISOString(),\n        },\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch glucose data:', error);\n      throw new Error('Failed to fetch glucose data.');\n    }\n  }\n\n  async getRealTimeData(patientId: string): Promise<GlucoseReading> {\n    try {\n      const response = await this.api.get(`/patients/${patientId}/glucose/current`);\n      const data = response.data;\n      \n      return {\n        timestamp: new Date(data.timestamp),\n        value: data.value,\n        trend: data.trend,\n        trendArrow: data.trendArrow,\n        status: this.getGlucoseStatus(data.value),\n        unit: data.unit || 'mg/dL',\n      };\n    } catch (error) {\n      console.error('Failed to fetch real-time data:', error);\n      throw new Error('Failed to fetch real-time glucose data.');\n    }\n  }\n\n  private getGlucoseStatus(value: number): 'low' | 'normal' | 'high' | 'critical' {\n    if (value < 70) return 'low';\n    if (value < 180) return 'normal';\n    if (value < 250) return 'high';\n    return 'critical';\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.token;\n  }\n\n  logout(): void {\n    this.token = null;\n    delete this.api.defaults.headers.common['Authorization'];\n    localStorage.removeItem('libre_token');\n  }\n}\n\nexport const libreApiService = new LibreApiService();\nexport default libreApiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}